name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:

jobs:
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: python -m pip install -e .[dev]
      - name: Run Ruff Check
        run: ruff check .
      - name: Run Ruff Format Check
        run: ruff format --check .

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: python -m pip install -e .[dev]
      - name: Run MyPy
        run: |
          export FORCE_BINJA_MOCK=1
          mypy src/binja_test_mocks tests --explicit-package-bases

  pyright:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: python -m pip install -e .[dev]
      - name: Run Pyright
        run: |
          export FORCE_BINJA_MOCK=1
          pyright

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: python -m pip install -e .[dev]
      - name: Run Pytest
        run: |
          export FORCE_BINJA_MOCK=1
          pytest tests -v --cov=binja_test_mocks --cov-report=term-missing --cov-report=xml
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  example-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install package
        run: python -m pip install -e .[dev]
      - name: Test example plugin
        run: |
          cd examples/basic_plugin
          export FORCE_BINJA_MOCK=1
          python test_example_arch.py

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install build dependencies
        run: python -m pip install build twine
      - name: Build package
        run: python -m build
      - name: Check package
        run: twine check dist/*
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  summary:
    runs-on: ubuntu-latest
    needs: [ruff, mypy, pyright, unit-tests, example-tests, build]
    if: always()
    steps:
      - name: Check overall status
        run: |
          if [ "${{ needs.ruff.result }}" == "success" ] && \
             [ "${{ needs.mypy.result }}" == "success" ] && \
             [ "${{ needs.pyright.result }}" == "success" ] && \
             [ "${{ needs.unit-tests.result }}" == "success" ] && \
             [ "${{ needs.example-tests.result }}" == "success" ] && \
             [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ All checks passed successfully!"
          else
            echo "❌ Some checks failed"
            echo "Ruff: ${{ needs.ruff.result }}"
            echo "MyPy: ${{ needs.mypy.result }}"
            echo "Pyright: ${{ needs.pyright.result }}"
            echo "Unit Tests: ${{ needs.unit-tests.result }}"
            echo "Example Tests: ${{ needs.example-tests.result }}"
            echo "Build: ${{ needs.build.result }}"
            exit 1
          fi